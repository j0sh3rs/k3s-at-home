---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 40.3.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    defaultRules:
      rules:
        etcd: false
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        route:
          group_by: ["alertname"]
          group_wait: 20s
          group_interval: 5m
          repeat_interval: 3h
          receiver: "discord_webhook"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog|RebootScheduled"
            - receiver: "discord_webhook"
              matchers:
                - severity = "critical"
              continue: true
        receivers:
          - name: "null"
          - name: "discord_webhook"
            webhook_configs:
              - url: "http://alertmanager-discord:9094"
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal:
              - alertname
              - namespace
      alertmanagerSpec:
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 10Gi
      prometheus:
        annotations:
          reloader.stakater.com/auto: "true"
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    prometheusOperator:
      createCustomResource: true
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 150m
            memory: 50Mi
          limits:
            cpu: 300m
            memory: 50Mi
      podAnnotations:
        reloader.stakater.com/auto: "true"
    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    grafana:
      enabled: false
      forceDeployDashboards: true
      defaultDashboardsTimezone: America/New_York
    prometheus-node-exporter:
      enabled: true
      fullnameOverride: node-exporter
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    prometheus:
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 2048Mi
      prometheusSpec:
        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 2048Mi
        replicas: 1
        replicaExternalLabelName: replica
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        retention: 21d
        retentionSize: 50GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 100Gi
        thanos:
          image: "quay.io/thanos/thanos:v0.28.0"
          version: v0.28.0
          objectStorageConfig:
            name: thanos-secrets
            key: objstore.yml
        additionalScrapeConfigs:
          - job_name: nas_postgres_exporter
            static_configs:
              - targets: ["192.168.35.5:9187"]
                labels:
                  app: "postgres"
            scrape_interval: 60s
            metrics_path: "/metrics"
            scheme: http
          - job_name: nas_snmp_exporter
            static_configs:
              - targets: ["192.168.35.5:9116"]
            scrape_interval: 60s
            metrics_path: "/metrics"
            scheme: http
          # - job_name: nas_minio
          #   static_configs:
          #     - targets: ["192.168.35.5:9000"]
          #   scrape_interval: 60s
          #   metrics_path: "/minio/v2/metrics/node"
          #   scheme: http
          - job_name: nas_node_exporter
            static_configs:
              - targets: ["192.168.35.5:9100"]
            scrape_interval: 60s
            metrics_path: "/metrics"
            scheme: http
          - job_name: "kubernetes-ingresses"
            metrics_path: /probe
            scrape_interval: 60s
            params:
              module: [http_2xx]
            kubernetes_sd_configs:
              - role: ingress
            relabel_configs:
              - source_labels:
                  [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels:
                  [
                    __meta_kubernetes_ingress_scheme,
                    __address__,
                    __meta_kubernetes_ingress_path,
                  ]
                regex: (.+);(.+);(.+)
                replacement: ${1}://${2}${3}
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter-prometheus-blackbox-exporter:9115
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_ingress_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_ingress_name]
                target_label: kubernetes_name
          - job_name: kubernetes-services-http
            metrics_path: /probe
            scrape_interval: 60s
            params:
              module:
                - http_2xx
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_probe
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_protocol
                action: keep
                regex: http
              - source_labels:
                  - __address__
                target_label: __param_target
              - target_label: __address__
                replacement: "blackbox-exporter-prometheus-blackbox-exporter:9115"
              - source_labels:
                  - __param_target
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_service_name
                target_label: kubernetes_name
          - job_name: kubernetes-services-tcp
            metrics_path: /probe
            scrape_interval: 60s
            params:
              module:
                - tcp_connect
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_probe
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_protocol
                action: keep
                regex: tcp
              - source_labels:
                  - __address__
                target_label: __param_target
              - target_label: __address__
                replacement: "blackbox-exporter-prometheus-blackbox-exporter:9115"
              - source_labels:
                  - __param_target
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_service_name
                target_label: kubernetes_name
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: false
      thanosIngress:
        enabled: false
