---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 39.9.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    nameOverride: prometheus
    fullnameOverride: prometheus
    defaultRules:
      rules:
        etcd: false
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        route:
          group_by: ['alertname']
          group_wait: 20s
          group_interval: 5m
          repeat_interval: 3h
          receiver: discord_webhook
        receivers:
          - name: 'discord_webhook'
            webhook_configs:
            - url: 'http://alertmanager-discord:9094'
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal:
              - alertname
              - namespace
      alertmanagerSpec:
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 10Gi
      prometheus:
        annotations:
          reloader.stakater.com/auto: "true"
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    prometheusOperator:
      createCustomResource: true
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 150m
            memory: 50Mi
          limits:
            cpu: 300m
            memory: 50Mi
      podAnnotations:
        reloader.stakater.com/auto: "true"
    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.35.8
        - 192.168.35.6
        - 192.168.35.200
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.35.8
        - 192.168.35.6
        - 192.168.35.200
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: true
      endpoints:
        - 192.168.35.8
        - 192.168.35.6
        - 192.168.35.200
    kubeEtcd:
      enabled: false
    grafana:
      enabled: true
      defaultDashboardsTimezone: America/New_York
      dashboards:
        default:
          flux-cluster:
            url: >-
              https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: >-
              https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/control-plane.json
            datasource: Prometheus
          nginx-ingress:
            url: >-
              https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/grafana/dashboards/nginx.json
            datasource: Prometheus
      deploymentStrategy:
        type: Recreate
      persistence:
        enabled: false
      envFromSecret: grafana-secrets
      image:
        tag: 9.0.7
      plugins:
        - natel-discrete-panel
        - pr0ps-trackmap-panel
        - grafana-piechart-panel
        - vonage-status-panel
        - grafana-worldmap-panel
        - grafana-clock-panel
        - camptocamp-prometheus-alertmanager-datasource
        - cloudflare-app
      sidecar:
        datasources:
          enabled: true
          defaultDatasourceEnabled: true
        dashboards:
          enabled: true
          searchNamespace: ALL
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/modsecurity-transaction-id: "$request_id"
          nginx.ingress.kubernetes.io/modsecurity-snippet: |
            SecRuleEngine On
            SecRequestBodyAccess On
            SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
                "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
            SecRule REQUEST_HEADERS:Content-Type "application/json" \
                "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
            SecRequestBodyLimit 13107200
            SecRequestBodyNoFilesLimit 131072
            SecRequestBodyLimitAction Reject
            SecRequestBodyJsonDepthLimit 512
            SecArgumentsLimit 1000
            SecRule &ARGS "@ge 1000" \
            "id:'200007', phase:2,t:none,log,deny,status:400,msg:'Failed to fully parse request body due to large argument count',severity:2"
            SecRule REQBODY_ERROR "!@eq 0" \
            "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
            SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
            "id:'200003',phase:2,t:none,log,deny,status:400, \
            msg:'Multipart request body failed strict validation: \
            PE %{REQBODY_PROCESSOR_ERROR}, \
            BQ %{MULTIPART_BOUNDARY_QUOTED}, \
            BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
            DB %{MULTIPART_DATA_BEFORE}, \
            DA %{MULTIPART_DATA_AFTER}, \
            HF %{MULTIPART_HEADER_FOLDING}, \
            LF %{MULTIPART_LF_LINE}, \
            SM %{MULTIPART_MISSING_SEMICOLON}, \
            IQ %{MULTIPART_INVALID_QUOTING}, \
            IP %{MULTIPART_INVALID_PART}, \
            IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
            FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"
            SecRule MULTIPART_UNMATCHED_BOUNDARY "@eq 1" \
                "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"
            SecPcreMatchLimit 1000
            SecPcreMatchLimitRecursion 1000
            SecRule TX:/^MSC_/ "!@streq 0" \
                    "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"
            SecResponseBodyAccess On
            SecResponseBodyMimeType text/plain text/html text/xml

            # Buffer response bodies of up to 512 KB in length.
            SecResponseBodyLimit 524288
            SecResponseBodyLimitAction ProcessPartial
            SecTmpDir /tmp/
            SecDataDir /tmp/
            SecAuditEngine RelevantOnly
            SecAuditLogRelevantStatus "^(?:5|4(?!04))"
            SecAuditLogParts ABCIJDEFHZ
            SecAuditLogType Serial
            SecAuditLog /var/log/modsec_audit.log
            SecArgumentSeparator &
            SecCookieFormat 0
            SecUnicodeMapFile unicode.mapping 20127
            SecStatusEngine Off
            SecDebugLog /tmp/modsec_debug.log
            Include /etc/nginx/owasp-modsecurity-crs/nginx-modsecurity.conf
        hosts:
          - grafana.bth.wtf
    prometheus-node-exporter:
      enabled: true
      fullnameOverride: node-exporter
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    prometheus:
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 2048Mi
      prometheusSpec:
        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 2048Mi
        replicas: 1
        replicaExternalLabelName: replica
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        retention: 21d
        retentionSize: 50GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
             resources:
               requests:
                 storage: 100Gi
        thanos:
          image: 'quay.io/thanos/thanos:v0.27.0'
          version: v0.27.0
          objectStorageConfig:
            name: thanos-secrets
            key: objstore.yml
        additionalScrapeConfigs:
          - job_name: kubernetes-services-http
            metrics_path: /probe
            scrape_interval: 60s
            params:
              module:
                - http_2xx
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_probe
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_protocol
                action: keep
                regex: http
              - source_labels:
                  - __address__
                target_label: __param_target
              - target_label: __address__
                replacement: 'blackbox-exporter-prometheus-blackbox-exporter:9115'
              - source_labels:
                  - __param_target
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_service_name
                target_label: kubernetes_name
          - job_name: kubernetes-services-tcp
            metrics_path: /probe
            scrape_interval: 60s
            params:
              module:
                - tcp_connect
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_probe
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_protocol
                action: keep
                regex: tcp
              - source_labels:
                  - __address__
                target_label: __param_target
              - target_label: __address__
                replacement: 'blackbox-exporter-prometheus-blackbox-exporter:9115'
              - source_labels:
                  - __param_target
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_service_name
                target_label: kubernetes_name
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      thanosIngress:
        enabled: false
